[{"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/index.js":"1","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/App.js":"2","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/reportWebVitals.js":"3","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/shared/DarkModeToggle/DarkModeContext.js":"4","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Contact/Contact.js":"5","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Home/Home.js":"6","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Projects/Projects.js":"7","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/About/About.js":"8","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Skills/Skills.js":"9","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/NavigationBar/NavigationBar.js":"10","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Projects/Carousel.tsx":"11","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/shared/HoverImage.js":"12","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/shared/DarkModeToggle/CookieUtils.js":"13","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Home/RotatingText.js":"14","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/About/TypingDots.js":"15","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/shared/DarkModeToggle/DarkModeToggle.js":"16","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/hooks/useInView.js":"17"},{"size":323,"mtime":1704149622340,"results":"18","hashOfConfig":"19"},{"size":2373,"mtime":1708079137660,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1697851432243,"results":"21","hashOfConfig":"19"},{"size":976,"mtime":1703485723590,"results":"22","hashOfConfig":"19"},{"size":5349,"mtime":1708044174468,"results":"23","hashOfConfig":"19"},{"size":4208,"mtime":1708078144710,"results":"24","hashOfConfig":"19"},{"size":14594,"mtime":1708070682539,"results":"25","hashOfConfig":"19"},{"size":4778,"mtime":1708076675876,"results":"26","hashOfConfig":"19"},{"size":7276,"mtime":1707993369832,"results":"27","hashOfConfig":"19"},{"size":4586,"mtime":1708073623759,"results":"28","hashOfConfig":"19"},{"size":10114,"mtime":1707277105200,"results":"29","hashOfConfig":"19"},{"size":2080,"mtime":1707292781593,"results":"30","hashOfConfig":"19"},{"size":1392,"mtime":1698821258032,"results":"31","hashOfConfig":"19"},{"size":7312,"mtime":1703728910852,"results":"32","hashOfConfig":"19"},{"size":1293,"mtime":1707286656557,"results":"33","hashOfConfig":"19"},{"size":1666,"mtime":1708053905762,"results":"34","hashOfConfig":"19"},{"size":3283,"mtime":1708068099187,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"96h84h",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/index.js",[],[],["92"],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/App.js",[],[],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/reportWebVitals.js",[],[],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/shared/DarkModeToggle/DarkModeContext.js",[],[],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Contact/Contact.js",[],[],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Home/Home.js",["93"],[],"//--------------------------------------------------------------------------------------//\n//                                         Home                                         //\n//--------------------------------------------------------------------------------------//\n// Credit for rotating text animation: https://www.npmjs.com/package/react-rotating-text?activeTab=readme\n\n// Libraries & Files\nimport useInView from '../../hooks/useInView';      // Import custom hook to check if an element is in the viewport\nimport ReactRotatingText from './RotatingText';     // Import rotating text component\nimport React, { preload, useRef, useState, useEffect } from 'react';    // Import React features\nimport classNames from 'classnames';                // Import classnames for dynamic className assignment\nimport { useDarkMode } from '../../shared/DarkModeToggle/DarkModeContext'; // Import custom hook for dark mode state\nimport './Home.css';                                // Import CSS for Home component\nimport '../NavigationBar/NavigationBar.css';        // Import CSS for NavigationBar component\nimport '../../normalize.css';                       // Import normalize.css for CSS resets\n\n// Images\nimport lightModeHomeImagePng from '../../images/home_images/self-image.png';         // Import normal mode image of me\nimport darkModeHomeImagePng from '../../images/home_images/self-image-dark-mode.png'; // Import dark mode image of me\nimport lightModeHomeImageWebp from '../../images/home_images/self-image.webp';        // Import normal mode image of me in webp format\nimport darkModeHomeImageWebp from '../../images/home_images/self-image-dark-mode.webp';// Import dark mode image of me in webp format\n\nfunction Home() {\n    // States for dark mode & checking if Home is in view\n    const { isDarkMode } = useDarkMode();          // Get dark mode state\n    const homeRef = useRef(null);                  // Create ref for home section\n    const isHomeInView = useInView                 // Check if home section is in view\n        (homeRef, { sectionName: 'home' });        \n\n    // State for image source - changes based on dark mode state\n    const [imageSrc, setImageSrc] = useState(isDarkMode ? darkModeHomeImageWebp : lightModeHomeImageWebp);\n    \n    // Update imageSrc when isDarkMode changes\n    useEffect(() => {\n        setImageSrc(isDarkMode ? darkModeHomeImageWebp : lightModeHomeImageWebp);\n    }, [isDarkMode]); // Dependency array, re-run effect when isDarkMode changes\n\n    // Fallback to PNG if WebP is not supported\n    const handleError = () => {\n        setImageSrc(isDarkMode ? darkModeHomeImagePng : lightModeHomeImagePng);\n    };\n\n    // Preload\n\n\n    \n    // Determine the class for text container based on states\n    const textContainerClass = classNames({      \n        'home__text-container': true,\n        'animate-home-text-container': isHomeInView,\n        'dark-mode': isDarkMode \n    });\n\n    // Render the Home section\n    return (\n        <section className = \"home\" id = \"home\" ref={homeRef}>\n            {/* Left side of the Home section w/ my name & rotating titles */}\n            <div className=\"home__left\">\n                <div className={textContainerClass}>\n                    <div className=\"block-wrapper\">\n                        {/* Text w/ my name & rotating titles */}\n                        <h1 className=\"home__text-name\">Kevin Cendana</h1>\n                        <p className=\"home__text-alias\">\n                            <ReactRotatingText items={[\n                                'Software Engineer',\n                                'Web Developer',\n                                'Computer Science Student',\n                                ]} />\n                        </p>\n                    </div>\n                </div>\n            </div>\n            {/* Right side of the Home section w/ drawing of me, darkens on dark mode*/}\n            <img src={imageSrc} \n                onError={handleError} \n                alt='Kevin Cendana Drawing' \n                className={`home-image ${isHomeInView ? 'animate-home-image' : ''}`} \n                draggable=\"false\">\n            </img>\n        </section>\n    );\n}\n\nexport default Home;\n","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Projects/Projects.js",[],[],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/About/About.js",[],[],["94"],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Skills/Skills.js",[],[],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/NavigationBar/NavigationBar.js",["95"],[],"//--------------------------------------------------------------------------------------//\n//                                 NavigationBar.js                                     //\n//--------------------------------------------------------------------------------------//\n\n// Libraries & Files\nimport React, { useState } from 'react';   // Import useState hook from React\n// Removed react-scroll Link import since we are replacing it with <a> tags and manual handling\nimport classNames from 'classnames';       // Import classNames to dynamically set class names\nimport './NavigationBar.css';              // Import CSS for the navigation bar\nimport DarkModeToggle from '../../shared/DarkModeToggle/DarkModeToggle'; // Import the DarkModeToggle component\n\n// Assuming you have a navigation array or similar structure\nconst navigation = [\n    { name: 'Home', href: 'home' },\n    { name: 'About', href: 'about' },\n    { name: 'Skills', href: 'skills' },\n    { name: 'Projects', href: 'projects' },\n    { name: 'Contact', href: 'contact' },\n];\n\n// Helper function for smooth scrolling (Consider this as an example, you might need to adjust based on your setup)\nconst handleSmoothScroll = (e, href) => {\n    e.preventDefault(); // Prevent the default anchor behavior\n\n    const targetElement = document.getElementById(href); // Get the target element by ID\n    const headerOffset = 32;  // Offset, scroll a little bit further up \n\n    if (targetElement) {\n        const elementPosition = targetElement.offsetTop;\n        const offsetPosition = elementPosition - headerOffset;\n\n        // Use window.scrollTo with behavior 'smooth' for a smooth scrolling effect\n        window.scrollTo({\n            top: offsetPosition, // Scroll to the position above the target element\n            behavior: 'smooth',\n        });\n\n        // Update the URL hash without reloading the page\n        window.history.pushState({}, '', `#${href}`);\n    }\n};\n\n\n// Render the Navigation Bar\nfunction NavigationBar() {\n    // State to track which section is active\n    const [activeSection, setActiveSection] = useState('');\n\n    // Function to set active section and update active state\n    const onSetActive = (section) => {\n        setActiveSection(section);\n    };\n\n    // Function to get active class for section\n    const getActiveClass = (section) => {\n        return classNames({ 'navbar__link-active': activeSection === section });\n    };\n\n    // Return the Navigation Bar\n    return (\n        <nav className=\"navbar\" role=\"navigation\">\n            <div className=\"navbar__list-wrapper\">\n                {/* Dynamically generate navigation links */}\n                <ul className=\"navbar__list\">\n                    {navigation.map((item) => (\n                        <li key={item.name} className={`borderXwidth ${getActiveClass(item.href)}`}>\n                            <a\n                                href={`#${item.href}`}\n                                onClick={(e) => handleSmoothScroll(e, item.href)}\n                            >\n                                {item.name}\n                            </a>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n            {/* Items in the top right of the nav bar: Social Media icons & Dark Mode switch */}\n            <div className=\"top-right-items\">\n                {/* Icons: CSV, LinkedIn, GitHub */}\n                <a href=\"https://docs.google.com/document/d/1xiAtzAXNMSw3ZkajAZaag-O40Fxn4iWoJ1nj-sb5YCA/edit?usp=sharing\" target=\"_blank\" className=\"github-logo-link\" rel=\"noopener noreferrer\" aria-label=\"Resume on Google Docs\">\n                    <div className=\"navbar-icon csv-icon\"></div>\n                </a>\n                <a href=\"https://linkedin.com/in/kevincendana\" target=\"_blank\" className=\"linkedin-icon-link\" rel=\"noopener noreferrer\" aria-label=\"LinkedIn Profile\">\n                    <div className=\"navbar-icon linkedin-icon\"></div>\n                </a>\n                <a href=\"https://github.com/KevCendana\" target=\"_blank\" className=\"github-icon-link\" rel=\"noopener noreferrer\" aria-label=\"GitHub Profile\">\n                    <div className=\"navbar-icon github-icon\"></div>\n                </a>\n\n                {/* Dark Mode Toggle */}\n                <div className=\"toggle__container\">\n                    <label className=\"switch\">\n                        <DarkModeToggle />\n                        <span className=\"slider round\"></span>\n                    </label>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default NavigationBar;\n","/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Projects/Carousel.tsx",[],[],["96"],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/shared/HoverImage.js",[],[],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/shared/DarkModeToggle/CookieUtils.js",[],[],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/Home/RotatingText.js",[],[],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/components/About/TypingDots.js",[],["97"],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/shared/DarkModeToggle/DarkModeToggle.js",[],[],"/Users/home/Desktop/Workspace/Projects HTML CSS JS/Kevin-Cendana-Website/src/hooks/useInView.js",[],[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":9,"column":17,"nodeType":"102","messageId":"103","endLine":9,"endColumn":24},{"ruleId":"98","replacedBy":"104"},{"ruleId":"100","severity":1,"message":"105","line":50,"column":11,"nodeType":"102","messageId":"103","endLine":50,"endColumn":22},{"ruleId":"98","replacedBy":"99"},{"ruleId":"106","severity":1,"message":"107","line":22,"column":6,"nodeType":"108","endLine":22,"endColumn":22,"suggestions":"109","suppressions":"110"},"no-new-object",["111"],"no-unused-vars","'preload' is defined but never used.","Identifier","unusedVar",["111"],"'onSetActive' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'messageArray'. Either include it or remove the dependency array.","ArrayExpression",["112"],["113"],"no-object-constructor",{"desc":"114","fix":"115"},{"kind":"116","justification":"117"},"Update the dependencies array to be: [messageArray, startAnimation]",{"range":"118","text":"119"},"directive","",[844,860],"[messageArray, startAnimation]"]