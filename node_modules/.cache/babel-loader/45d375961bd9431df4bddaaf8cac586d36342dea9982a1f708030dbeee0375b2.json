{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/DarkModeToggle/DarkModeToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Home.css';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DarkModeToggle() {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false); // State to track dark mode status\n\n  useEffect(() => {\n    const storedDarkMode = getCookie('darkMode');\n    setIsDarkMode(storedDarkMode === '1');\n    toggleDarkMode(storedDarkMode === '1');\n  }, []);\n  const getCookie = name => {\n    const cookieName = name + \"=\";\n    const cookieArray = document.cookie.split(';');\n    for (let i = 0; i < cookieArray.length; i++) {\n      let cookie = cookieArray[i];\n      while (cookie.charAt(0) === ' ') {\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(cookieName) === 0) {\n        return cookie.substring(cookieName.length, cookie.length);\n      }\n    }\n    return \"\";\n  };\n  const setCookie = (name, value, days) => {\n    const date = new Date();\n    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n    const expires = \"expires=\" + date.toUTCString();\n    document.cookie = name + \"=\" + value + \";\" + expires + \";path=/\";\n  };\n  const toggleDarkMode = value => {\n    document.body.classList.toggle('dark_mode', value);\n    const elements = document.querySelectorAll('html, body, p, h1, .allSpeechBubblesContainer, .speechBubble, .innerContainer, .text, .headerContainer, .outerContainer');\n    elements.forEach(element => {\n      element.classList.toggle('dark_mode', value);\n    });\n  };\n  const handleToggleChange = () => {\n    const newValue = !isDarkMode;\n    setIsDarkMode(newValue);\n    setCookie('darkMode', newValue ? '1' : '0', 30); // Assuming cookie should last for 30 days\n    toggleDarkMode(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"dark_mode_toggle\",\n      checked: isDarkMode,\n      onChange: handleToggleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(DarkModeToggle, \"bUs4CHDjU8AH+ZZYt8wlh4bHppI=\");\n_c = DarkModeToggle;\nexport default DarkModeToggle;\nvar _c;\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","DarkModeToggle","_s","isDarkMode","setIsDarkMode","storedDarkMode","getCookie","toggleDarkMode","name","cookieName","cookieArray","document","cookie","split","i","length","charAt","substring","indexOf","setCookie","value","days","date","Date","setTime","getTime","expires","toUTCString","body","classList","toggle","elements","querySelectorAll","forEach","element","handleToggleChange","newValue","children","type","id","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/DarkModeToggle/DarkModeToggle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Home.css';\nimport '../App.css';\n\n\nfunction DarkModeToggle() {\n    const [isDarkMode, setIsDarkMode] = useState(false); // State to track dark mode status\n\n    useEffect(() => {\n        const storedDarkMode = getCookie('darkMode');\n        setIsDarkMode(storedDarkMode === '1');\n        toggleDarkMode(storedDarkMode === '1');\n    }, []);\n\n    const getCookie = (name) => {\n        const cookieName = name + \"=\";\n        const cookieArray = document.cookie.split(';');\n        for (let i = 0; i < cookieArray.length; i++) {\n            let cookie = cookieArray[i];\n            while (cookie.charAt(0) === ' ') {\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(cookieName) === 0) {\n                return cookie.substring(cookieName.length, cookie.length);\n            }\n        }\n        return \"\";\n    }\n\n    const setCookie = (name, value, days) => {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = \"expires=\" + date.toUTCString();\n        document.cookie = name + \"=\" + value + \";\" + expires + \";path=/\";\n    }\n\n    const toggleDarkMode = (value) => {\n        document.body.classList.toggle('dark_mode', value);\n        const elements = document.querySelectorAll('html, body, p, h1, .allSpeechBubblesContainer, .speechBubble, .innerContainer, .text, .headerContainer, .outerContainer');\n        elements.forEach(element => {\n            element.classList.toggle('dark_mode', value);\n        });\n    }\n\n    const handleToggleChange = () => {\n        const newValue = !isDarkMode;\n        setIsDarkMode(newValue);\n        setCookie('darkMode', newValue ? '1' : '0', 30); // Assuming cookie should last for 30 days\n        toggleDarkMode(newValue);\n    }\n\n    return (\n        <>\n            {/* Other components and JSX here */}\n            <input type=\"checkbox\" id=\"dark_mode_toggle\" checked={isDarkMode} onChange={handleToggleChange} />\n        </>\n    );\n}\n\nexport default DarkModeToggle;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,YAAY;AACnB,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGpB,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErDC,SAAS,CAAC,MAAM;IACZ,MAAMS,cAAc,GAAGC,SAAS,CAAC,UAAU,CAAC;IAC5CF,aAAa,CAACC,cAAc,KAAK,GAAG,CAAC;IACrCE,cAAc,CAACF,cAAc,KAAK,GAAG,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,SAAS,GAAIE,IAAI,IAAK;IACxB,MAAMC,UAAU,GAAGD,IAAI,GAAG,GAAG;IAC7B,MAAME,WAAW,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;IAC9C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC,IAAIF,MAAM,GAAGF,WAAW,CAACI,CAAC,CAAC;MAC3B,OAAOF,MAAM,CAACI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC7BJ,MAAM,GAAGA,MAAM,CAACK,SAAS,CAAC,CAAC,CAAC;MAChC;MACA,IAAIL,MAAM,CAACM,OAAO,CAACT,UAAU,CAAC,KAAK,CAAC,EAAE;QAClC,OAAOG,MAAM,CAACK,SAAS,CAACR,UAAU,CAACM,MAAM,EAAEH,MAAM,CAACG,MAAM,CAAC;MAC7D;IACJ;IACA,OAAO,EAAE;EACb,CAAC;EAED,MAAMI,SAAS,GAAGA,CAACX,IAAI,EAAEY,KAAK,EAAEC,IAAI,KAAK;IACrC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;IACvBD,IAAI,CAACE,OAAO,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,GAAIJ,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAK,CAAC;IAC3D,MAAMK,OAAO,GAAG,UAAU,GAAGJ,IAAI,CAACK,WAAW,CAAC,CAAC;IAC/ChB,QAAQ,CAACC,MAAM,GAAGJ,IAAI,GAAG,GAAG,GAAGY,KAAK,GAAG,GAAG,GAAGM,OAAO,GAAG,SAAS;EACpE,CAAC;EAED,MAAMnB,cAAc,GAAIa,KAAK,IAAK;IAC9BT,QAAQ,CAACiB,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEV,KAAK,CAAC;IAClD,MAAMW,QAAQ,GAAGpB,QAAQ,CAACqB,gBAAgB,CAAC,yHAAyH,CAAC;IACrKD,QAAQ,CAACE,OAAO,CAACC,OAAO,IAAI;MACxBA,OAAO,CAACL,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEV,KAAK,CAAC;IAChD,CAAC,CAAC;EACN,CAAC;EAED,MAAMe,kBAAkB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,QAAQ,GAAG,CAACjC,UAAU;IAC5BC,aAAa,CAACgC,QAAQ,CAAC;IACvBjB,SAAS,CAAC,UAAU,EAAEiB,QAAQ,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IACjD7B,cAAc,CAAC6B,QAAQ,CAAC;EAC5B,CAAC;EAED,oBACItC,OAAA,CAAAE,SAAA;IAAAqC,QAAA,eAEIvC,OAAA;MAAOwC,IAAI,EAAC,UAAU;MAACC,EAAE,EAAC,kBAAkB;MAACC,OAAO,EAAErC,UAAW;MAACsC,QAAQ,EAAEN;IAAmB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACpG,CAAC;AAEX;AAAC3C,EAAA,CApDQD,cAAc;AAAA6C,EAAA,GAAd7C,cAAc;AAsDvB,eAAeA,cAAc;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}