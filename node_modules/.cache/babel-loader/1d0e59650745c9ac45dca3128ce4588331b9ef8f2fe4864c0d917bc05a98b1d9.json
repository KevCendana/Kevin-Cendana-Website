{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/Personal_Website/src/NavigationBar/DarkModeToggle.js\",\n  _s = $RefreshSig$();\n//--------------------------------------------------------------------------------------//\n//                                  DarkModeToggle.js                                   //\n//--------------------------------------------------------------------------------------//\n/* this file is used to toggle dark mode on and off */\n\nimport React, { useState, useEffect } from 'react';\nimport './DarkModeToggle.css';\nimport { getCookie, setCookie } from '../CookieUtils';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DarkModeToggle() {\n  _s();\n  const location = useLocation(); // get the page address (AKA location)\n  const [isDarkMode, setIsDarkMode] = useState(false); // keep track of dark mode state\n  const getStoredDarkMode = () => getCookie('dark-mode') === 'true'; // get dark mode preference from cookie\n  const [transitionDuration, setTransitionDuration] = useState(0.6); // Default to 0.4 seconds\n\n  // initialize dark mode based on cookie\n  useEffect(() => {\n    setIsDarkMode(getStoredDarkMode()); // initialize dark mode based on cookie\n    if (getStoredDarkMode()) toggleDarkMode(true); // apply styles if dark mode\n  }, [location]); // rerun effect on route change\n\n  // store dark mode preference in cookie for 1 year \n  const storeDarkMode = value => setCookie('dark-mode', value, 365);\n\n  // toggle dark mode css styles on / off\n  const toggleDarkMode = value => {\n    // update body class\n    document.body.classList.toggle('dark-mode', value);\n\n    // Set transition duration for the toggle\n    const transitionStyle = `background-color ${transitionDuration}s, transform ${transitionDuration}s`;\n\n    // Toggle styles for selected elements and apply transition duration\n    const selectors = 'html, body, p, div, label, span, nav, Link, ul, h1, h2, .background, .navbar, .navbar__list, .navbar__link, .slider, .slider:before';\n    document.querySelectorAll(selectors).forEach(el => {\n      el.classList.toggle('dark-mode', value);\n      el.style.transition = transitionStyle;\n    });\n\n    // Update the cookie\n    storeDarkMode(value);\n  };\n\n  // function called when checkbox is clicked\n  const handleToggleChange = () => {\n    const newValue = !isDarkMode; // get the opposite of the current state\n    setIsDarkMode(newValue); // remember this new state\n    toggleDarkMode(newValue); // update to the new opposite state\n  };\n\n  // render the checkbox graphic and set its initial state\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"checkbox\",\n    id: \"dark-mode\",\n    checked: isDarkMode,\n    onChange: handleToggleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(DarkModeToggle, \"+1fpLb9nahs+M1QtWkD6yyOBnGA=\", false, function () {\n  return [useLocation];\n});\n_c = DarkModeToggle;\nexport default DarkModeToggle;\nvar _c;\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"names":["React","useState","useEffect","getCookie","setCookie","useLocation","jsxDEV","_jsxDEV","DarkModeToggle","_s","location","isDarkMode","setIsDarkMode","getStoredDarkMode","transitionDuration","setTransitionDuration","toggleDarkMode","storeDarkMode","value","document","body","classList","toggle","transitionStyle","selectors","querySelectorAll","forEach","el","style","transition","handleToggleChange","newValue","type","id","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/Personal_Website/src/NavigationBar/DarkModeToggle.js"],"sourcesContent":["//--------------------------------------------------------------------------------------//\n//                                  DarkModeToggle.js                                   //\n//--------------------------------------------------------------------------------------//\n/* this file is used to toggle dark mode on and off */\n\nimport React, { useState, useEffect } from 'react'; \nimport './DarkModeToggle.css'; \nimport { getCookie, setCookie } from '../CookieUtils'; \nimport { useLocation } from 'react-router-dom'; \n\nfunction DarkModeToggle() {\n    const location = useLocation();                         // get the page address (AKA location)\n    const [isDarkMode, setIsDarkMode] = useState(false);    // keep track of dark mode state\n    const getStoredDarkMode = () => getCookie('dark-mode') === 'true'; // get dark mode preference from cookie\n    const [transitionDuration, setTransitionDuration] = useState(0.6); // Default to 0.4 seconds\n\n\n    // initialize dark mode based on cookie\n    useEffect(() => {\n        setIsDarkMode(getStoredDarkMode());            // initialize dark mode based on cookie\n        if (getStoredDarkMode()) toggleDarkMode(true); // apply styles if dark mode\n    }, [location]);                                    // rerun effect on route change\n\n    // store dark mode preference in cookie for 1 year \n    const storeDarkMode = (value) => setCookie('dark-mode', value, 365);\n\n    // toggle dark mode css styles on / off\n    const toggleDarkMode = (value) => {\n        // update body class\n        document.body.classList.toggle('dark-mode', value);\n        \n        // Set transition duration for the toggle\n        const transitionStyle = `background-color ${transitionDuration}s, transform ${transitionDuration}s`;\n\n\n    // Toggle styles for selected elements and apply transition duration\n    const selectors = 'html, body, p, div, label, span, nav, Link, ul, h1, h2, .background, .navbar, .navbar__list, .navbar__link, .slider, .slider:before';\n    document.querySelectorAll(selectors).forEach(el => {\n        el.classList.toggle('dark-mode', value);\n        el.style.transition = transitionStyle;\n    });\n\n    // Update the cookie\n    storeDarkMode(value);\n    }\n\n    // function called when checkbox is clicked\n    const handleToggleChange = () => {\n        const newValue = !isDarkMode; // get the opposite of the current state\n        setIsDarkMode(newValue);      // remember this new state\n        toggleDarkMode(newValue);     // update to the new opposite state\n    }\n\n    // render the checkbox graphic and set its initial state\n    return (\n        <input type=\"checkbox\" id=\"dark-mode\" checked={isDarkMode} onChange={handleToggleChange} /> \n    );\n}\n\nexport default DarkModeToggle; "],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sBAAsB;AAC7B,SAASC,SAAS,EAAEC,SAAS,QAAQ,gBAAgB;AACrD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC,CAAC,CAAyB;EACxD,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAI;EACxD,MAAMY,iBAAiB,GAAGA,CAAA,KAAMV,SAAS,CAAC,WAAW,CAAC,KAAK,MAAM,CAAC,CAAC;EACnE,MAAM,CAACW,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGd,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;;EAGnE;EACAC,SAAS,CAAC,MAAM;IACZU,aAAa,CAACC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAY;IAC/C,IAAIA,iBAAiB,CAAC,CAAC,EAAEG,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EACnD,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC,CAAC,CAAoC;;EAEnD;EACA,MAAMO,aAAa,GAAIC,KAAK,IAAKd,SAAS,CAAC,WAAW,EAAEc,KAAK,EAAE,GAAG,CAAC;;EAEnE;EACA,MAAMF,cAAc,GAAIE,KAAK,IAAK;IAC9B;IACAC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEJ,KAAK,CAAC;;IAElD;IACA,MAAMK,eAAe,GAAI,oBAAmBT,kBAAmB,gBAAeA,kBAAmB,GAAE;;IAGvG;IACA,MAAMU,SAAS,GAAG,qIAAqI;IACvJL,QAAQ,CAACM,gBAAgB,CAACD,SAAS,CAAC,CAACE,OAAO,CAACC,EAAE,IAAI;MAC/CA,EAAE,CAACN,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEJ,KAAK,CAAC;MACvCS,EAAE,CAACC,KAAK,CAACC,UAAU,GAAGN,eAAe;IACzC,CAAC,CAAC;;IAEF;IACAN,aAAa,CAACC,KAAK,CAAC;EACpB,CAAC;;EAED;EACA,MAAMY,kBAAkB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,QAAQ,GAAG,CAACpB,UAAU,CAAC,CAAC;IAC9BC,aAAa,CAACmB,QAAQ,CAAC,CAAC,CAAM;IAC9Bf,cAAc,CAACe,QAAQ,CAAC,CAAC,CAAK;EAClC,CAAC;;EAED;EACA,oBACIxB,OAAA;IAAOyB,IAAI,EAAC,UAAU;IAACC,EAAE,EAAC,WAAW;IAACC,OAAO,EAAEvB,UAAW;IAACwB,QAAQ,EAAEL;EAAmB;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEnG;AAAC9B,EAAA,CA/CQD,cAAc;EAAA,QACFH,WAAW;AAAA;AAAAmC,EAAA,GADvBhC,cAAc;AAiDvB,eAAeA,cAAc;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}