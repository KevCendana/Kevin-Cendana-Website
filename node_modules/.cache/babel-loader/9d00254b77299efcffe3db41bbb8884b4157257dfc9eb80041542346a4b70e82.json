{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/DarkModeToggle/DarkModeToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './DarkModeToggle.css';\nimport './CookieUtils.js';\nimport { getCookie, setCookie } from './CookieUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DarkModeToggle() {\n  _s();\n  console.log('DarkModeToggle(): called');\n  const [isDarkMode, setIsDarkMode] = useState(false); // State to track if dark mode is enabled or not\n\n  // UseEffect hook to set the initial dark mode state based on the cookie value\n\n  const storedDarkMode = () => {\n    return localStorage.getItem('dark-mode') === 'enabled';\n  };\n  useEffect(() => {\n    const storedDarkModeCookie = getCookie('dark-mode'); // Get the stored dark mode preference from the cookie\n    setIsDarkMode(storedDarkMode === '1'); // Update the state based on the stored value\n    //. toggleDarkMode(storedDarkMode === '1'); // Apply the dark mode class to the necessary elements\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  // Function to set a cookie with a specified name, value, and expiration in days\n  const setCookie = (name, value, days) => {\n    console.log('DarkModeToggle(): setCookie() called');\n    // Create a date for when the cookie will expire\n    const date = new Date();\n    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n    const expires = \"expires=\" + date.toUTCString();\n    // Set the cookie\n    document.cookie = name + \"=\" + value + \";\" + expires + \";path=/\";\n  };\n\n  // Function to toggle dark mode styling on or off\n  const toggleDarkMode = value => {\n    console.log('DarkModeToggle(): toggleDarkMode() called');\n\n    //. new code\n    const newValue = !isDarkMode;\n    setIsDarkMode(newValue);\n    setCookie('dark-mode', newValue ? '1' : '0', 30);\n\n    // Toggle the 'dark-mode' class on the body\n    document.body.classList.toggle('dark-mode', value);\n    // Get all the elements that need dark mode styling\n    const elements = document.querySelectorAll('html, body, p, div, label, span, nav, Link, ul, h1, h2, .background, .navbar, .navbar__list, .navbar__link');\n    // Toggle the 'dark-mode' class on all of the selected elements\n    elements.forEach(element => {\n      element.classList.toggle('dark-mode', value);\n    });\n    setCookie('dark-mode', value ? '1' : '0', 30);\n  };\n\n  // Handler for the checkbox change event\n  const handleToggleChange = () => {\n    console.log('DarkModeToggle(): handleToggleChange() called');\n    // Toggle the current dark mode state\n    const newValue = !isDarkMode;\n    // Update the state\n    setIsDarkMode(newValue);\n    // Save the new preference in a cookie\n    setCookie('dark-mode', newValue ? '1' : '0', 30);\n    // Apply/remove the dark mode styling\n    toggleDarkMode(newValue);\n  };\n  return (\n    /*#__PURE__*/\n    // Render a checkbox to toggle dark mode on or off\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: \"dark-mode\",\n        checked: isDarkMode,\n        onChange: handleToggleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  );\n}\n\n// Export the DarkModeToggle component and the getCookie function\n_s(DarkModeToggle, \"bUs4CHDjU8AH+ZZYt8wlh4bHppI=\");\n_c = DarkModeToggle;\nexport default DarkModeToggle;\nexport { getCookie };\nvar _c;\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"names":["React","useState","useEffect","getCookie","setCookie","jsxDEV","_jsxDEV","Fragment","_Fragment","DarkModeToggle","_s","console","log","isDarkMode","setIsDarkMode","storedDarkMode","localStorage","getItem","storedDarkModeCookie","name","value","days","date","Date","setTime","getTime","expires","toUTCString","document","cookie","toggleDarkMode","newValue","body","classList","toggle","elements","querySelectorAll","forEach","element","handleToggleChange","children","type","id","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/DarkModeToggle/DarkModeToggle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './DarkModeToggle.css';\nimport './CookieUtils.js';\nimport { getCookie, setCookie } from './CookieUtils';\n\n\nfunction DarkModeToggle() {\n    console.log('DarkModeToggle(): called') \n    const [isDarkMode, setIsDarkMode] = useState(false); // State to track if dark mode is enabled or not\n\n    // UseEffect hook to set the initial dark mode state based on the cookie value\n\n    const storedDarkMode = () => {\n        return localStorage.getItem('dark-mode') === 'enabled';\n      }\n\n    useEffect(() => {\n        const storedDarkModeCookie = getCookie('dark-mode'); // Get the stored dark mode preference from the cookie\n        setIsDarkMode(storedDarkMode === '1'); // Update the state based on the stored value\n        //. toggleDarkMode(storedDarkMode === '1'); // Apply the dark mode class to the necessary elements\n    }, []); // Empty dependency array means this effect runs once on mount\n\n    // Function to set a cookie with a specified name, value, and expiration in days\n    const setCookie = (name, value, days) => {\n        console.log('DarkModeToggle(): setCookie() called')\n        // Create a date for when the cookie will expire\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = \"expires=\" + date.toUTCString();\n        // Set the cookie\n        document.cookie = name + \"=\" + value + \";\" + expires + \";path=/\";\n    }\n\n    // Function to toggle dark mode styling on or off\n    const toggleDarkMode = (value) => {\n        console.log('DarkModeToggle(): toggleDarkMode() called')\n\n        //. new code\n        const newValue = !isDarkMode;\n        setIsDarkMode(newValue);\n        setCookie('dark-mode', newValue ? '1' : '0', 30);\n\n\n        // Toggle the 'dark-mode' class on the body\n        document.body.classList.toggle('dark-mode', value);\n        // Get all the elements that need dark mode styling\n        const elements = document.querySelectorAll(\n            'html, body, p, div, label, span, nav, Link, ul, h1, h2, .background, .navbar, .navbar__list, .navbar__link'\n        );\n        // Toggle the 'dark-mode' class on all of the selected elements\n        elements.forEach(element => {\n            element.classList.toggle('dark-mode', value);\n        });\n        setCookie('dark-mode', value ? '1' : '0', 30);\n    }\n\n    // Handler for the checkbox change event\n    const handleToggleChange = () => {\n        console.log('DarkModeToggle(): handleToggleChange() called')\n        // Toggle the current dark mode state\n        const newValue = !isDarkMode;\n        // Update the state\n        setIsDarkMode(newValue);\n        // Save the new preference in a cookie\n        setCookie('dark-mode', newValue ? '1' : '0', 30);\n        // Apply/remove the dark mode styling\n        toggleDarkMode(newValue);\n    }\n\n    return (\n        // Render a checkbox to toggle dark mode on or off\n        <>\n            {/* Checkbox to toggle dark mode */}\n            <input type=\"checkbox\" id=\"dark-mode\" checked={isDarkMode} onChange={handleToggleChange} />\n        </>\n    );\n}\n\n// Export the DarkModeToggle component and the getCookie function\nexport default DarkModeToggle;\nexport { getCookie };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}