{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/DarkModeToggle/DarkModeToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Importing required libraries\nimport './DarkModeToggle.css'; // Importing styles\nimport { getCookie, setCookie } from './CookieUtils'; // Importing utility functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DarkModeToggle() {\n  _s();\n  console.log('DarkModeToggle(): called');\n\n  // State to track if dark mode is enabled or not\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // Function to get the stored dark mode preference from localStorage\n  const getStoredDarkMode = () => getCookie('dark-mode') === 'true';\n  useEffect(() => {\n    setIsDarkMode(getStoredDarkMode()); // Update the state based on the stored value\n  }, []); // This effect runs once on mount\n\n  // Function to store dark mode preference in localStorage\n  const storeDarkMode = value => {\n    setCookie('dark-mode', value, 365);\n  };\n\n  // Function to toggle dark mode styling on or off\n  const toggleDarkMode = value => {\n    console.log('DarkModeToggle(): toggleDarkMode() called');\n    document.body.classList.toggle('dark-mode', value); // Toggle the 'dark-mode' class on the body\n\n    // Toggle the 'dark-mode' class on all of the selected elements\n    const elements = document.querySelectorAll('html, body, p, div, label, span, nav, Link, ul, h1, h2, .background, .navbar, .navbar__list, .navbar__link');\n    elements.forEach(element => {\n      element.classList.toggle('dark-mode', value);\n    });\n    storeDarkMode(value); // Store the dark mode preference\n  };\n\n  // Handler for the checkbox change event\n  const handleToggleChange = () => {\n    console.log('DarkModeToggle(): handleToggleChange() called');\n    const newValue = !isDarkMode; // Toggle the current dark mode state\n\n    setIsDarkMode(newValue); // Update the state\n    toggleDarkMode(newValue); // Apply/remove the dark mode styling\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"dark-mode\",\n      checked: isDarkMode,\n      onChange: handleToggleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(DarkModeToggle, \"bUs4CHDjU8AH+ZZYt8wlh4bHppI=\");\n_c = DarkModeToggle;\nexport default DarkModeToggle; // Exporting the DarkModeToggle component\nvar _c;\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"names":["React","useState","useEffect","getCookie","setCookie","jsxDEV","_jsxDEV","Fragment","_Fragment","DarkModeToggle","_s","console","log","isDarkMode","setIsDarkMode","getStoredDarkMode","storeDarkMode","value","toggleDarkMode","document","body","classList","toggle","elements","querySelectorAll","forEach","element","handleToggleChange","newValue","children","type","id","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/DarkModeToggle/DarkModeToggle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Importing required libraries\nimport './DarkModeToggle.css'; // Importing styles\nimport { getCookie, setCookie } from './CookieUtils'; // Importing utility functions\n\nfunction DarkModeToggle() {\n    console.log('DarkModeToggle(): called');\n\n    // State to track if dark mode is enabled or not\n    const [isDarkMode, setIsDarkMode] = useState(false);\n\n    // Function to get the stored dark mode preference from localStorage\n    const getStoredDarkMode = () => getCookie('dark-mode') === 'true';\n\n    useEffect(() => {\n        setIsDarkMode(getStoredDarkMode()); // Update the state based on the stored value\n        \n    }, []); // This effect runs once on mount\n\n    // Function to store dark mode preference in localStorage\n    const storeDarkMode = (value) => {\n        setCookie('dark-mode', value, 365);\n    };\n\n    // Function to toggle dark mode styling on or off\n    const toggleDarkMode = (value) => {\n        console.log('DarkModeToggle(): toggleDarkMode() called');\n\n        document.body.classList.toggle('dark-mode', value); // Toggle the 'dark-mode' class on the body\n\n        // Toggle the 'dark-mode' class on all of the selected elements\n        const elements = document.querySelectorAll(\n            'html, body, p, div, label, span, nav, Link, ul, h1, h2, .background, .navbar, .navbar__list, .navbar__link'\n        );\n        elements.forEach(element => {\n            element.classList.toggle('dark-mode', value);\n        });\n\n        storeDarkMode(value); // Store the dark mode preference\n    }\n\n    // Handler for the checkbox change event\n    const handleToggleChange = () => {\n        console.log('DarkModeToggle(): handleToggleChange() called');\n\n        const newValue = !isDarkMode; // Toggle the current dark mode state\n\n        setIsDarkMode(newValue); // Update the state\n        toggleDarkMode(newValue); // Apply/remove the dark mode styling\n        \n    }\n\n    return (\n        <>\n            {/* Checkbox to toggle dark mode */}\n            <input type=\"checkbox\" id=\"dark-mode\" checked={isDarkMode} onChange={handleToggleChange} /> \n        </>\n    );\n}\n\nexport default DarkModeToggle; // Exporting the DarkModeToggle component\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAC;AACpD,OAAO,sBAAsB,CAAC,CAAC;AAC/B,SAASC,SAAS,EAAEC,SAAS,QAAQ,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtD,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;EAEvC;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAMc,iBAAiB,GAAGA,CAAA,KAAMZ,SAAS,CAAC,WAAW,CAAC,KAAK,MAAM;EAEjED,SAAS,CAAC,MAAM;IACZY,aAAa,CAACC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;EAExC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMC,aAAa,GAAIC,KAAK,IAAK;IAC7Bb,SAAS,CAAC,WAAW,EAAEa,KAAK,EAAE,GAAG,CAAC;EACtC,CAAC;;EAED;EACA,MAAMC,cAAc,GAAID,KAAK,IAAK;IAC9BN,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IAExDO,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEL,KAAK,CAAC,CAAC,CAAC;;IAEpD;IACA,MAAMM,QAAQ,GAAGJ,QAAQ,CAACK,gBAAgB,CACtC,4GACJ,CAAC;IACDD,QAAQ,CAACE,OAAO,CAACC,OAAO,IAAI;MACxBA,OAAO,CAACL,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEL,KAAK,CAAC;IAChD,CAAC,CAAC;IAEFD,aAAa,CAACC,KAAK,CAAC,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMU,kBAAkB,GAAGA,CAAA,KAAM;IAC7BhB,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;IAE5D,MAAMgB,QAAQ,GAAG,CAACf,UAAU,CAAC,CAAC;;IAE9BC,aAAa,CAACc,QAAQ,CAAC,CAAC,CAAC;IACzBV,cAAc,CAACU,QAAQ,CAAC,CAAC,CAAC;EAE9B,CAAC;;EAED,oBACItB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,eAEIvB,OAAA;MAAOwB,IAAI,EAAC,UAAU;MAACC,EAAE,EAAC,WAAW;MAACC,OAAO,EAAEnB,UAAW;MAACoB,QAAQ,EAAEN;IAAmB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC7F,CAAC;AAEX;AAAC3B,EAAA,CArDQD,cAAc;AAAA6B,EAAA,GAAd7B,cAAc;AAuDvB,eAAeA,cAAc,CAAC,CAAC;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}