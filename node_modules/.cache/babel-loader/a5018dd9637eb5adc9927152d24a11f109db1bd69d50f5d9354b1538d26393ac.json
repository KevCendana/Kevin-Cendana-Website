{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/Slideshow/Slideshow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Slideshow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Slideshow = ({\n  slides\n}) => {\n  _s();\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [prevSlide, setPrevSlide] = useState(null); // Track the previous slide\n  const intervalRef = useRef(null);\n  const nextSlide = () => {\n    setPrevSlide(currentSlide); // Set the current slide as previous before changing\n    setCurrentSlide(prev => (prev + 1) % slides.length);\n  };\n  const getSlideStyle = (slide, index) => {\n    let backgroundImage = `url(${slide.image})`;\n\n    // If the slide is a GIF and is the current slide, append a unique query string\n    if (slide.isGif && index === currentSlide) {\n      const uniqueString = new Date().getTime(); // Current timestamp\n      backgroundImage = `url(${slide.image}?unique=${uniqueString})`;\n    }\n    return {\n      backgroundImage\n    };\n  };\n  // Set up interval for auto slide change\n  useEffect(() => {\n    intervalRef.current = setInterval(nextSlide, 3000);\n    return () => clearInterval(intervalRef.current);\n  }, [currentSlide, slides.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slideshow\",\n    children: slides.map((slide, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `slide ${index === currentSlide ? 'active' : ''} ${index === prevSlide ? 'previous' : ''}`,\n      style: {\n        backgroundImage: `url(${slide.image})`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"caption\",\n        children: slide.caption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Slideshow, \"xnx69Wky6KdO35tNfukzd3ThiOM=\");\n_c = Slideshow;\nexport default Slideshow;\nvar _c;\n$RefreshReg$(_c, \"Slideshow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Slideshow","slides","_s","currentSlide","setCurrentSlide","prevSlide","setPrevSlide","intervalRef","nextSlide","prev","length","getSlideStyle","slide","index","backgroundImage","image","isGif","uniqueString","Date","getTime","current","setInterval","clearInterval","className","children","map","style","caption","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/Slideshow/Slideshow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Slideshow.css';\n\nconst Slideshow = ({ slides }) => {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [prevSlide, setPrevSlide] = useState(null); // Track the previous slide\n  const intervalRef = useRef(null);\n\n  const nextSlide = () => {\n    setPrevSlide(currentSlide); // Set the current slide as previous before changing\n    setCurrentSlide((prev) => (prev + 1) % slides.length);\n  };\n  const getSlideStyle = (slide, index) => {\n    let backgroundImage = `url(${slide.image})`;\n\n    // If the slide is a GIF and is the current slide, append a unique query string\n    if (slide.isGif && index === currentSlide) {\n      const uniqueString = new Date().getTime(); // Current timestamp\n      backgroundImage = `url(${slide.image}?unique=${uniqueString})`;\n    }\n\n    return { backgroundImage };\n  };\n  // Set up interval for auto slide change\n  useEffect(() => {\n    intervalRef.current = setInterval(nextSlide, 3000);\n    return () => clearInterval(intervalRef.current);\n  }, [currentSlide, slides.length]);\n\n  return (\n    <div className=\"slideshow\">\n      {slides.map((slide, index) => (\n        <div\n          key={index}\n          className={`slide ${index === currentSlide ? 'active' : ''} ${index === prevSlide ? 'previous' : ''}`}\n          style={{ backgroundImage: `url(${slide.image})` }}\n        >\n          <div className=\"caption\">{slide.caption}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Slideshow;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClD,MAAMY,WAAW,GAAGV,MAAM,CAAC,IAAI,CAAC;EAEhC,MAAMW,SAAS,GAAGA,CAAA,KAAM;IACtBF,YAAY,CAACH,YAAY,CAAC,CAAC,CAAC;IAC5BC,eAAe,CAAEK,IAAI,IAAK,CAACA,IAAI,GAAG,CAAC,IAAIR,MAAM,CAACS,MAAM,CAAC;EACvD,CAAC;EACD,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACtC,IAAIC,eAAe,GAAI,OAAMF,KAAK,CAACG,KAAM,GAAE;;IAE3C;IACA,IAAIH,KAAK,CAACI,KAAK,IAAIH,KAAK,KAAKV,YAAY,EAAE;MACzC,MAAMc,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;MAC3CL,eAAe,GAAI,OAAMF,KAAK,CAACG,KAAM,WAAUE,YAAa,GAAE;IAChE;IAEA,OAAO;MAAEH;IAAgB,CAAC;EAC5B,CAAC;EACD;EACAlB,SAAS,CAAC,MAAM;IACdW,WAAW,CAACa,OAAO,GAAGC,WAAW,CAACb,SAAS,EAAE,IAAI,CAAC;IAClD,OAAO,MAAMc,aAAa,CAACf,WAAW,CAACa,OAAO,CAAC;EACjD,CAAC,EAAE,CAACjB,YAAY,EAAEF,MAAM,CAACS,MAAM,CAAC,CAAC;EAEjC,oBACEX,OAAA;IAAKwB,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBvB,MAAM,CAACwB,GAAG,CAAC,CAACb,KAAK,EAAEC,KAAK,kBACvBd,OAAA;MAEEwB,SAAS,EAAG,SAAQV,KAAK,KAAKV,YAAY,GAAG,QAAQ,GAAG,EAAG,IAAGU,KAAK,KAAKR,SAAS,GAAG,UAAU,GAAG,EAAG,EAAE;MACtGqB,KAAK,EAAE;QAAEZ,eAAe,EAAG,OAAMF,KAAK,CAACG,KAAM;MAAG,CAAE;MAAAS,QAAA,eAElDzB,OAAA;QAAKwB,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAEZ,KAAK,CAACe;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC,GAJzClB,KAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKP,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAvCIF,SAAS;AAAAgC,EAAA,GAAThC,SAAS;AAyCf,eAAeA,SAAS;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}