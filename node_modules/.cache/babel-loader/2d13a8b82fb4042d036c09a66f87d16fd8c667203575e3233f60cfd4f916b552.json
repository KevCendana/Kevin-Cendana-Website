{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/Slideshow/Slideshow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Slideshow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Slideshow = ({\n  slides\n}) => {\n  _s();\n  // State to keep track of which slide is currently shown\n  const [currentSlide, setCurrentSlide] = useState(0);\n\n  // References to slideshow and interval for cleanup\n  const slideshowRef = useRef();\n  const intervalRef = useRef(null);\n\n  // Function to go to the next slide\n  const nextSlide = () => {\n    setCurrentSlide(prev => (prev + 1) % slides.length);\n  };\n\n  // Function to reset the interval for auto-changing slides\n  const resetInterval = () => {\n    clearInterval(intervalRef.current); // Clears any existing interval\n    intervalRef.current = setInterval(nextSlide, 3000); // Sets up a new interval\n  };\n\n  // useEffect hook to set up and clean up the interval\n  useEffect(() => {\n    resetInterval(); // Set the interval when the component mounts\n\n    // Return a function to clear the interval when the component unmounts\n    return () => clearInterval(intervalRef.current);\n  }, [slides.length]); // Reset interval if the number of slides changes\n\n  // Function to handle the start of a drag\n  const handleDragStart = e => {\n    const startX = e.clientX; // Starting X position\n    clearInterval(intervalRef.current); // Clear interval on user interaction\n\n    // Define what happens when the mouse moves after dragging starts\n    slideshowRef.current.onmousemove = ev => {\n      if (ev.clientX - startX > 100) {\n        // If dragged enough to the right, show previous slide\n        setCurrentSlide(prev => (prev - 1 + slides.length) % slides.length);\n        slideshowRef.current.onmousemove = null; // Stop listening to mousemove\n      } else if (startX - ev.clientX > 100) {\n        // If dragged enough to the left, show next slide\n        setCurrentSlide(prev => (prev + 1) % slides.length);\n        slideshowRef.current.onmousemove = null; // Stop listening to mousemove\n      }\n    };\n  };\n\n  // Function to handle the end of a drag\n  const handleDragEnd = () => {\n    slideshowRef.current.onmousemove = null; // Stop listening to mousemove\n    resetInterval(); // Restart the interval after user interaction\n  };\n\n  // Render the slideshow component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slideshow\",\n    ref: slideshowRef,\n    onMouseDown: handleDragStart // Start the drag process\n    ,\n    onMouseUp: handleDragEnd // End the drag process\n    ,\n    onMouseLeave: handleDragEnd // End the drag process when the mouse leaves the slideshow\n    ,\n    children: slides.map((slide, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `slide ${index === currentSlide ? 'active' : ''}`,\n      style: {\n        backgroundImage: `url(${slide.image})`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: slide.image,\n        alt: slide.caption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"caption\",\n        children: slide.caption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Slideshow, \"G0ySTDguoUmNc0ycbVAzwxBrPBk=\");\n_c = Slideshow;\nexport default Slideshow;\nvar _c;\n$RefreshReg$(_c, \"Slideshow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Slideshow","slides","_s","currentSlide","setCurrentSlide","slideshowRef","intervalRef","nextSlide","prev","length","resetInterval","clearInterval","current","setInterval","handleDragStart","e","startX","clientX","onmousemove","ev","handleDragEnd","className","ref","onMouseDown","onMouseUp","onMouseLeave","children","map","slide","index","style","backgroundImage","image","src","alt","caption","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/Slideshow/Slideshow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Slideshow.css';\n\nconst Slideshow = ({ slides }) => {\n  // State to keep track of which slide is currently shown\n  const [currentSlide, setCurrentSlide] = useState(0);\n\n  // References to slideshow and interval for cleanup\n  const slideshowRef = useRef();\n  const intervalRef = useRef(null);\n\n  // Function to go to the next slide\n  const nextSlide = () => {\n    setCurrentSlide((prev) => (prev + 1) % slides.length);\n  };\n\n  // Function to reset the interval for auto-changing slides\n  const resetInterval = () => {\n    clearInterval(intervalRef.current); // Clears any existing interval\n    intervalRef.current = setInterval(nextSlide, 3000); // Sets up a new interval\n  };\n\n  // useEffect hook to set up and clean up the interval\n  useEffect(() => {\n    resetInterval(); // Set the interval when the component mounts\n\n    // Return a function to clear the interval when the component unmounts\n    return () => clearInterval(intervalRef.current);\n  }, [slides.length]); // Reset interval if the number of slides changes\n\n  // Function to handle the start of a drag\n  const handleDragStart = (e) => {\n    const startX = e.clientX; // Starting X position\n    clearInterval(intervalRef.current); // Clear interval on user interaction\n\n    // Define what happens when the mouse moves after dragging starts\n    slideshowRef.current.onmousemove = (ev) => {\n      if (ev.clientX - startX > 100) {\n        // If dragged enough to the right, show previous slide\n        setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);\n        slideshowRef.current.onmousemove = null; // Stop listening to mousemove\n      } else if (startX - ev.clientX > 100) {\n        // If dragged enough to the left, show next slide\n        setCurrentSlide((prev) => (prev + 1) % slides.length);\n        slideshowRef.current.onmousemove = null; // Stop listening to mousemove\n      }\n    };\n  };\n\n  // Function to handle the end of a drag\n  const handleDragEnd = () => {\n    slideshowRef.current.onmousemove = null; // Stop listening to mousemove\n    resetInterval(); // Restart the interval after user interaction\n  };\n\n  // Render the slideshow component\n  return (\n    <div\n      className=\"slideshow\"\n      ref={slideshowRef}\n      onMouseDown={handleDragStart} // Start the drag process\n      onMouseUp={handleDragEnd} // End the drag process\n      onMouseLeave={handleDragEnd} // End the drag process when the mouse leaves the slideshow\n    >\n      {slides.map((slide, index) => (\n        <div\n        key={index}\n        className={`slide ${index === currentSlide ? 'active' : ''}`}\n        style={{ backgroundImage: `url(${slide.image})` }}\n        >\n\n          <img src={slide.image} alt={slide.caption} />\n          <div className=\"caption\">{slide.caption}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Slideshow;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAChC;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;;EAEnD;EACA,MAAMU,YAAY,GAAGR,MAAM,CAAC,CAAC;EAC7B,MAAMS,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;;EAEhC;EACA,MAAMU,SAAS,GAAGA,CAAA,KAAM;IACtBH,eAAe,CAAEI,IAAI,IAAK,CAACA,IAAI,GAAG,CAAC,IAAIP,MAAM,CAACQ,MAAM,CAAC;EACvD,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1BC,aAAa,CAACL,WAAW,CAACM,OAAO,CAAC,CAAC,CAAC;IACpCN,WAAW,CAACM,OAAO,GAAGC,WAAW,CAACN,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;EACtD,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACdc,aAAa,CAAC,CAAC,CAAC,CAAC;;IAEjB;IACA,OAAO,MAAMC,aAAa,CAACL,WAAW,CAACM,OAAO,CAAC;EACjD,CAAC,EAAE,CAACX,MAAM,CAACQ,MAAM,CAAC,CAAC,CAAC,CAAC;;EAErB;EACA,MAAMK,eAAe,GAAIC,CAAC,IAAK;IAC7B,MAAMC,MAAM,GAAGD,CAAC,CAACE,OAAO,CAAC,CAAC;IAC1BN,aAAa,CAACL,WAAW,CAACM,OAAO,CAAC,CAAC,CAAC;;IAEpC;IACAP,YAAY,CAACO,OAAO,CAACM,WAAW,GAAIC,EAAE,IAAK;MACzC,IAAIA,EAAE,CAACF,OAAO,GAAGD,MAAM,GAAG,GAAG,EAAE;QAC7B;QACAZ,eAAe,CAAEI,IAAI,IAAK,CAACA,IAAI,GAAG,CAAC,GAAGP,MAAM,CAACQ,MAAM,IAAIR,MAAM,CAACQ,MAAM,CAAC;QACrEJ,YAAY,CAACO,OAAO,CAACM,WAAW,GAAG,IAAI,CAAC,CAAC;MAC3C,CAAC,MAAM,IAAIF,MAAM,GAAGG,EAAE,CAACF,OAAO,GAAG,GAAG,EAAE;QACpC;QACAb,eAAe,CAAEI,IAAI,IAAK,CAACA,IAAI,GAAG,CAAC,IAAIP,MAAM,CAACQ,MAAM,CAAC;QACrDJ,YAAY,CAACO,OAAO,CAACM,WAAW,GAAG,IAAI,CAAC,CAAC;MAC3C;IACF,CAAC;EACH,CAAC;;EAED;EACA,MAAME,aAAa,GAAGA,CAAA,KAAM;IAC1Bf,YAAY,CAACO,OAAO,CAACM,WAAW,GAAG,IAAI,CAAC,CAAC;IACzCR,aAAa,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC;;EAED;EACA,oBACEX,OAAA;IACEsB,SAAS,EAAC,WAAW;IACrBC,GAAG,EAAEjB,YAAa;IAClBkB,WAAW,EAAET,eAAgB,CAAC;IAAA;IAC9BU,SAAS,EAAEJ,aAAc,CAAC;IAAA;IAC1BK,YAAY,EAAEL,aAAc,CAAC;IAAA;IAAAM,QAAA,EAE5BzB,MAAM,CAAC0B,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvB9B,OAAA;MAEAsB,SAAS,EAAG,SAAQQ,KAAK,KAAK1B,YAAY,GAAG,QAAQ,GAAG,EAAG,EAAE;MAC7D2B,KAAK,EAAE;QAAEC,eAAe,EAAG,OAAMH,KAAK,CAACI,KAAM;MAAG,CAAE;MAAAN,QAAA,gBAGhD3B,OAAA;QAAKkC,GAAG,EAAEL,KAAK,CAACI,KAAM;QAACE,GAAG,EAAEN,KAAK,CAACO;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7CxC,OAAA;QAAKsB,SAAS,EAAC,SAAS;QAAAK,QAAA,EAAEE,KAAK,CAACO;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,GAN3CV,KAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOL,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACrC,EAAA,CA1EIF,SAAS;AAAAwC,EAAA,GAATxC,SAAS;AA4Ef,eAAeA,SAAS;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}