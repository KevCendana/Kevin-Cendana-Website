{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/DarkModeToggle/DarkModeToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './DarkModeToggle.css';\nimport './CookieUtils.js';\nimport { getCookie, setCookie } from './CookieUtils';\n\n// Function to get a cookie by its name\n// const getCookie = (name) => {\n//     // Define the prefix for the cookie we are looking for\n//     const cookieName = name + \"=\";\n//     // Split the document's cookies into an array\n//     const cookieArray = document.cookie.split(';');\n\n//     // Iterate over the array to find our cookie\n//     for (let i = 0; i < cookieArray.length; i++) {\n//         let cookie = cookieArray[i];\n//         // Remove any leading whitespace\n//         while (cookie.charAt(0) === ' ') {\n//             cookie = cookie.substring(1);\n//         }\n//         // If our cookie is found, return its value\n//         if (cookie.indexOf(cookieName) === 0) {\n//             return cookie.substring(cookieName.length, cookie.length);\n//         }\n//     }\n//     // Return an empty string if cookie not found\n//     return \"\";\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DarkModeToggle() {\n  _s();\n  console.log('DarkModeToggle(): called');\n  const [isDarkMode, setIsDarkMode] = useState(false); // State to track if dark mode is enabled or not\n\n  // UseEffect hook to set the initial dark mode state based on the cookie value\n  useEffect(() => {\n    const storedDarkMode = getCookie('dark-mode'); // Get the stored dark mode preference from the cookie\n    setIsDarkMode(storedDarkMode === '1'); // Update the state based on the stored value\n    //toggleDarkMode(storedDarkMode === '1'); // Apply the dark mode class to the necessary elements\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  // Function to set a cookie with a specified name, value, and expiration in days\n  const setCookie = (name, value, days) => {\n    console.log('DarkModeToggle(): setCookie() called');\n    // Create a date for when the cookie will expire\n    const date = new Date();\n    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n    const expires = \"expires=\" + date.toUTCString();\n    // Set the cookie\n    document.cookie = name + \"=\" + value + \";\" + expires + \";path=/\";\n  };\n\n  // Function to toggle dark mode styling on or off\n  const toggleDarkMode = value => {\n    console.log('DarkModeToggle(): toggleDarkMode() called');\n    // Toggle the 'dark-mode' class on the body\n    //document.body.classList.toggle('dark-mode', value);\n    const newValue = !isDarkMode;\n\n    // Get all the elements that need dark mode styling\n    const elements = document.querySelectorAll('html, body, p, div, label, span, nav, Link, ul, h1, h2, .background, .navbar, .navbar__list, .navbar__link');\n    // Toggle the 'dark-mode' class on all of the selected elements\n    elements.forEach(element => {\n      element.classList.toggle('dark-mode', value);\n    });\n    setCookie('dark-mode', value ? '1' : '0', 30);\n  };\n\n  // Handler for the checkbox change event\n  const handleToggleChange = () => {\n    console.log('DarkModeToggle(): handleToggleChange() called');\n    // Toggle the current dark mode state\n    const newValue = !isDarkMode;\n    // Update the state\n    setIsDarkMode(newValue);\n    // Save the new preference in a cookie\n    setCookie('dark-mode', newValue ? '1' : '0', 30);\n    // Apply/remove the dark mode styling\n    toggleDarkMode(newValue);\n  };\n  return (\n    /*#__PURE__*/\n    // Render a checkbox to toggle dark mode on or off\n    _jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: \"dark-mode\",\n        checked: isDarkMode,\n        onChange: handleToggleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)\n  );\n}\n\n// Export the DarkModeToggle component and the getCookie function\n_s(DarkModeToggle, \"bUs4CHDjU8AH+ZZYt8wlh4bHppI=\");\n_c = DarkModeToggle;\nexport default DarkModeToggle;\nexport { getCookie };\nvar _c;\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"names":["React","useState","useEffect","getCookie","setCookie","jsxDEV","_jsxDEV","Fragment","_Fragment","DarkModeToggle","_s","console","log","isDarkMode","setIsDarkMode","storedDarkMode","name","value","days","date","Date","setTime","getTime","expires","toUTCString","document","cookie","toggleDarkMode","newValue","elements","querySelectorAll","forEach","element","classList","toggle","handleToggleChange","children","type","id","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/DarkModeToggle/DarkModeToggle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './DarkModeToggle.css';\nimport './CookieUtils.js';\nimport { getCookie, setCookie } from './CookieUtils';\n\n// Function to get a cookie by its name\n// const getCookie = (name) => {\n//     // Define the prefix for the cookie we are looking for\n//     const cookieName = name + \"=\";\n//     // Split the document's cookies into an array\n//     const cookieArray = document.cookie.split(';');\n    \n//     // Iterate over the array to find our cookie\n//     for (let i = 0; i < cookieArray.length; i++) {\n//         let cookie = cookieArray[i];\n//         // Remove any leading whitespace\n//         while (cookie.charAt(0) === ' ') {\n//             cookie = cookie.substring(1);\n//         }\n//         // If our cookie is found, return its value\n//         if (cookie.indexOf(cookieName) === 0) {\n//             return cookie.substring(cookieName.length, cookie.length);\n//         }\n//     }\n//     // Return an empty string if cookie not found\n//     return \"\";\n// }\n\nfunction DarkModeToggle() {\n    console.log('DarkModeToggle(): called') \n    const [isDarkMode, setIsDarkMode] = useState(false); // State to track if dark mode is enabled or not\n\n    // UseEffect hook to set the initial dark mode state based on the cookie value\n    useEffect(() => {\n        const storedDarkMode = getCookie('dark-mode'); // Get the stored dark mode preference from the cookie\n        setIsDarkMode(storedDarkMode === '1'); // Update the state based on the stored value\n        //toggleDarkMode(storedDarkMode === '1'); // Apply the dark mode class to the necessary elements\n    }, []); // Empty dependency array means this effect runs once on mount\n\n    // Function to set a cookie with a specified name, value, and expiration in days\n    const setCookie = (name, value, days) => {\n        console.log('DarkModeToggle(): setCookie() called')\n        // Create a date for when the cookie will expire\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = \"expires=\" + date.toUTCString();\n        // Set the cookie\n        document.cookie = name + \"=\" + value + \";\" + expires + \";path=/\";\n    }\n\n    // Function to toggle dark mode styling on or off\n    const toggleDarkMode = (value) => {\n        console.log('DarkModeToggle(): toggleDarkMode() called')\n        // Toggle the 'dark-mode' class on the body\n        //document.body.classList.toggle('dark-mode', value);\n        const newValue = !isDarkMode;\n\n        \n\n\n\n        // Get all the elements that need dark mode styling\n        const elements = document.querySelectorAll(\n            'html, body, p, div, label, span, nav, Link, ul, h1, h2, .background, .navbar, .navbar__list, .navbar__link'\n        );\n        // Toggle the 'dark-mode' class on all of the selected elements\n        elements.forEach(element => {\n            element.classList.toggle('dark-mode', value);\n        });\n        setCookie('dark-mode', value ? '1' : '0', 30);\n    }\n\n    // Handler for the checkbox change event\n    const handleToggleChange = () => {\n        console.log('DarkModeToggle(): handleToggleChange() called')\n        // Toggle the current dark mode state\n        const newValue = !isDarkMode;\n        // Update the state\n        setIsDarkMode(newValue);\n        // Save the new preference in a cookie\n        setCookie('dark-mode', newValue ? '1' : '0', 30);\n        // Apply/remove the dark mode styling\n        toggleDarkMode(newValue);\n    }\n\n    return (\n        // Render a checkbox to toggle dark mode on or off\n        <>\n            {/* Checkbox to toggle dark mode */}\n            <input type=\"checkbox\" id=\"dark-mode\" checked={isDarkMode} onChange={handleToggleChange} />\n        </>\n    );\n}\n\n// Export the DarkModeToggle component and the getCookie function\nexport default DarkModeToggle;\nexport { getCookie };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}