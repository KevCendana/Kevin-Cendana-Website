{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/Slideshow/Slideshow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Slideshow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Slideshow = ({\n  slides\n}) => {\n  _s();\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const slideshowRef = useRef();\n  const intervalRef = useRef(); // Ref for the interval to allow for cleanup\n\n  const nextSlide = () => {\n    setCurrentSlide(prev => (prev + 1) % slides.length);\n  };\n  useEffect(() => {\n    // Set up the interval for auto slide change\n    intervalRef.current = setInterval(nextSlide, 3000);\n\n    // Clear the interval when the component unmounts\n    return () => clearInterval(intervalRef.current);\n  }, [slides.length]); // Dependency on slides.length to reset interval if slide count changes\n\n  const handleDragStart = e => {\n    const startX = e.clientX;\n    slideshowRef.current.onmousemove = ev => {\n      if (ev.clientX - startX > 100) {\n        clearInterval(intervalRef.current); // Clear interval on user interaction\n        previousSlide();\n        slideshowRef.current.onmousemove = null;\n      } else if (startX - ev.clientX > 100) {\n        clearInterval(intervalRef.current); // Clear interval on user interaction\n        nextSlide();\n        slideshowRef.current.onmousemove = null;\n      }\n    };\n  };\n  const handleDragEnd = () => {\n    slideshowRef.current.onmousemove = null;\n    // Restart the interval after user interaction\n    intervalRef.current = setInterval(nextSlide, 3000);\n  };\n\n  // Function to go to the previous slide\n  const previousSlide = () => {\n    setCurrentSlide(prev => (prev - 1 + slides.length) % slides.length);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slideshow\",\n    ref: slideshowRef,\n    onMouseDown: handleDragStart,\n    onMouseUp: handleDragEnd,\n    onMouseLeave: handleDragEnd,\n    children: slides.map((slide, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `slide ${index === currentSlide ? 'active' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: slide.image,\n        alt: slide.caption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"caption\",\n        children: slide.caption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Slideshow, \"G0ySTDguoUmNc0ycbVAzwxBrPBk=\");\n_c = Slideshow;\nexport default Slideshow;\nvar _c;\n$RefreshReg$(_c, \"Slideshow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Slideshow","slides","_s","currentSlide","setCurrentSlide","slideshowRef","intervalRef","nextSlide","prev","length","current","setInterval","clearInterval","handleDragStart","e","startX","clientX","onmousemove","ev","previousSlide","handleDragEnd","className","ref","onMouseDown","onMouseUp","onMouseLeave","children","map","slide","index","src","image","alt","caption","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/Slideshow/Slideshow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Slideshow.css';\n\nconst Slideshow = ({ slides }) => {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const slideshowRef = useRef();\n  const intervalRef = useRef(); // Ref for the interval to allow for cleanup\n\n  const nextSlide = () => {\n    setCurrentSlide((prev) => (prev + 1) % slides.length);\n  };\n\n  useEffect(() => {\n    // Set up the interval for auto slide change\n    intervalRef.current = setInterval(nextSlide, 3000);\n\n    // Clear the interval when the component unmounts\n    return () => clearInterval(intervalRef.current);\n  }, [slides.length]); // Dependency on slides.length to reset interval if slide count changes\n\n  const handleDragStart = (e) => {\n    const startX = e.clientX;\n    slideshowRef.current.onmousemove = (ev) => {\n      if (ev.clientX - startX > 100) {\n        clearInterval(intervalRef.current); // Clear interval on user interaction\n        previousSlide();\n        slideshowRef.current.onmousemove = null;\n      } else if (startX - ev.clientX > 100) {\n        clearInterval(intervalRef.current); // Clear interval on user interaction\n        nextSlide();\n        slideshowRef.current.onmousemove = null;\n      }\n    };\n  };\n\n  const handleDragEnd = () => {\n    slideshowRef.current.onmousemove = null;\n    // Restart the interval after user interaction\n    intervalRef.current = setInterval(nextSlide, 3000);\n  };\n\n  // Function to go to the previous slide\n  const previousSlide = () => {\n    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);\n  };\n\n  return (\n    <div\n      className=\"slideshow\"\n      ref={slideshowRef}\n      onMouseDown={handleDragStart}\n      onMouseUp={handleDragEnd}\n      onMouseLeave={handleDragEnd}\n    >\n      {slides.map((slide, index) => (\n        <div\n          key={index}\n          className={`slide ${index === currentSlide ? 'active' : ''}`}\n        >\n          <img src={slide.image} alt={slide.caption} />\n          <div className=\"caption\">{slide.caption}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Slideshow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}