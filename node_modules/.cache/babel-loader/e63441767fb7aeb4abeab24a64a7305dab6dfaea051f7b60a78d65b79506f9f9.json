{"ast":null,"code":"// animateLines.js\nimport { gsap } from 'gsap';\nexport const AnimateLines = (containerSelector, circleRadius) => {\n  const container = document.querySelector(containerSelector);\n  const numberOfLines = 8;\n  const angleIncrement = 360 / numberOfLines;\n  for (let i = 0; i < numberOfLines; i++) {\n    const line = document.createElement('div');\n    line.classList.add('line');\n\n    // Calculate angle in radians\n    const angle = i * angleIncrement * (Math.PI / 180);\n\n    // Calculate x and y based on the circle radius and angle\n    const x = 10 * circleRadius * Math.cos(angle);\n    const y = circleRadius * Math.sin(angle);\n\n    // Set the initial position of the line\n    line.style.top = `calc(50% + ${y}px)`;\n    line.style.left = `calc(50% + ${x}px)`;\n    container.appendChild(line);\n\n    // GSAP animation\n    gsap.fromTo(line, {\n      scale: 0,\n      rotation: i * angleIncrement,\n      transformOrigin: 'bottom center'\n    }, {\n      scale: 1,\n      opacity: 1,\n      duration: 0.5,\n      ease: 'elastic.out(1, 0.3)',\n      onComplete: () => gsap.to(line, {\n        opacity: 0,\n        duration: 0.5\n      })\n    });\n  }\n};\n\n// Use this function in your component like so:\n// AnimateLines('.home__left-image-container', 50); // where 50 is the radius of the circle\n_c = AnimateLines;\nvar _c;\n$RefreshReg$(_c, \"AnimateLines\");","map":{"version":3,"names":["gsap","AnimateLines","containerSelector","circleRadius","container","document","querySelector","numberOfLines","angleIncrement","i","line","createElement","classList","add","angle","Math","PI","x","cos","y","sin","style","top","left","appendChild","fromTo","scale","rotation","transformOrigin","opacity","duration","ease","onComplete","to","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/Home/AnimateLines.js"],"sourcesContent":["// animateLines.js\nimport { gsap } from 'gsap';\nexport const AnimateLines = (containerSelector, circleRadius) => {\n    const container = document.querySelector(containerSelector);\n    const numberOfLines = 8;\n    const angleIncrement = 360 / numberOfLines;\n  \n    for (let i = 0; i < numberOfLines; i++) {\n      const line = document.createElement('div');\n      line.classList.add('line');\n  \n      // Calculate angle in radians\n      const angle = i * angleIncrement * (Math.PI / 180);\n      \n      // Calculate x and y based on the circle radius and angle\n      const x = 10 *circleRadius * Math.cos(angle);\n      const y = circleRadius * Math.sin(angle);\n  \n      // Set the initial position of the line\n      line.style.top = `calc(50% + ${y}px)`;\n      line.style.left = `calc(50% + ${x}px)`;\n  \n      container.appendChild(line);\n  \n      // GSAP animation\n      gsap.fromTo(line,\n        {\n          scale: 0,\n          rotation: i * angleIncrement,\n          transformOrigin: 'bottom center',\n        },\n        {\n          scale: 1,\n          opacity: 1,\n          duration: 0.5,\n          ease: 'elastic.out(1, 0.3)',\n          onComplete: () => gsap.to(line, { opacity: 0, duration: 0.5 })\n        }\n      );\n    }\n  };\n  \n  // Use this function in your component like so:\n  // AnimateLines('.home__left-image-container', 50); // where 50 is the radius of the circle\n  "],"mappings":"AAAA;AACA,SAASA,IAAI,QAAQ,MAAM;AAC3B,OAAO,MAAMC,YAAY,GAAGA,CAACC,iBAAiB,EAAEC,YAAY,KAAK;EAC7D,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAACJ,iBAAiB,CAAC;EAC3D,MAAMK,aAAa,GAAG,CAAC;EACvB,MAAMC,cAAc,GAAG,GAAG,GAAGD,aAAa;EAE1C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,aAAa,EAAEE,CAAC,EAAE,EAAE;IACtC,MAAMC,IAAI,GAAGL,QAAQ,CAACM,aAAa,CAAC,KAAK,CAAC;IAC1CD,IAAI,CAACE,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;;IAE1B;IACA,MAAMC,KAAK,GAAGL,CAAC,GAAGD,cAAc,IAAIO,IAAI,CAACC,EAAE,GAAG,GAAG,CAAC;;IAElD;IACA,MAAMC,CAAC,GAAG,EAAE,GAAEd,YAAY,GAAGY,IAAI,CAACG,GAAG,CAACJ,KAAK,CAAC;IAC5C,MAAMK,CAAC,GAAGhB,YAAY,GAAGY,IAAI,CAACK,GAAG,CAACN,KAAK,CAAC;;IAExC;IACAJ,IAAI,CAACW,KAAK,CAACC,GAAG,GAAI,cAAaH,CAAE,KAAI;IACrCT,IAAI,CAACW,KAAK,CAACE,IAAI,GAAI,cAAaN,CAAE,KAAI;IAEtCb,SAAS,CAACoB,WAAW,CAACd,IAAI,CAAC;;IAE3B;IACAV,IAAI,CAACyB,MAAM,CAACf,IAAI,EACd;MACEgB,KAAK,EAAE,CAAC;MACRC,QAAQ,EAAElB,CAAC,GAAGD,cAAc;MAC5BoB,eAAe,EAAE;IACnB,CAAC,EACD;MACEF,KAAK,EAAE,CAAC;MACRG,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE,GAAG;MACbC,IAAI,EAAE,qBAAqB;MAC3BC,UAAU,EAAEA,CAAA,KAAMhC,IAAI,CAACiC,EAAE,CAACvB,IAAI,EAAE;QAAEmB,OAAO,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAI,CAAC;IAC/D,CACF,CAAC;EACH;AACF,CAAC;;AAED;AACA;AAAAI,EAAA,GAzCWjC,YAAY;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}