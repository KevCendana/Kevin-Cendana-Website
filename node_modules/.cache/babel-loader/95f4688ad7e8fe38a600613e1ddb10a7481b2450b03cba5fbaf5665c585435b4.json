{"ast":null,"code":"var _jsxFileName = \"/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/DarkModeToggle/DarkModeToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './DarkModeToggle.css';\nimport { getCookie, setCookie } from './CookieUtils';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DarkModeToggle() {\n  _s();\n  const location = useLocation(); // detects route changes\n  const [isDarkMode, setIsDarkMode] = useState(false); // track dark mode state\n\n  // get dark mode preference from cookie\n  const getStoredDarkMode = () => getCookie('dark-mode') === 'true';\n  useEffect(() => {\n    setIsDarkMode(getStoredDarkMode()); // initialize dark mode based on cookie\n    if (getStoredDarkMode()) toggleDarkMode(true); // apply styles if dark mode\n  }, [location]); // Rerun effect on route change\n\n  // Store dark mode preference in cookie\n  const storeDarkMode = value => setCookie('dark-mode', value, 365);\n\n  // Toggle dark mode styles\n  const toggleDarkMode = value => {\n    document.body.classList.toggle('dark-mode', value); // Update body class\n\n    // Toggle styles for selected elements\n    const selectors = 'html, body, p, div, label, span, nav, Link, ul, h1, h2, .background, .navbar, .navbar__list, .navbar__link';\n    document.querySelectorAll(selectors).forEach(el => el.classList.toggle('dark-mode', value));\n    storeDarkMode(value); // Update the cookie\n  };\n\n  // Handle the checkbox toggle\n  const handleToggleChange = () => {\n    const newValue = !isDarkMode; // Get opposite of current state\n    setIsDarkMode(newValue); // Update state\n    toggleDarkMode(newValue); // Toggle styles\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"checkbox\",\n    id: \"dark-mode\",\n    checked: isDarkMode,\n    onChange: handleToggleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this) // Render checkbox\n  ;\n}\n_s(DarkModeToggle, \"Ib60J/ucMktAtFyVw8i7SsNZQHE=\", false, function () {\n  return [useLocation];\n});\n_c = DarkModeToggle;\nexport default DarkModeToggle; // Export component\nvar _c;\n$RefreshReg$(_c, \"DarkModeToggle\");","map":{"version":3,"names":["React","useState","useEffect","getCookie","setCookie","useLocation","jsxDEV","_jsxDEV","DarkModeToggle","_s","location","isDarkMode","setIsDarkMode","getStoredDarkMode","toggleDarkMode","storeDarkMode","value","document","body","classList","toggle","selectors","querySelectorAll","forEach","el","handleToggleChange","newValue","type","id","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/home/Desktop/Workspace/HTML-CSS-JS-Projects/react-app/src/DarkModeToggle/DarkModeToggle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; \nimport './DarkModeToggle.css'; \nimport { getCookie, setCookie } from './CookieUtils'; \nimport { useLocation } from 'react-router-dom'; \n\nfunction DarkModeToggle() {\n    const location = useLocation();                      // detects route changes\n    const [isDarkMode, setIsDarkMode] = useState(false); // track dark mode state\n\n    // get dark mode preference from cookie\n    const getStoredDarkMode = () => getCookie('dark-mode') === 'true';\n\n    useEffect(() => {\n        setIsDarkMode(getStoredDarkMode());            // initialize dark mode based on cookie\n        if (getStoredDarkMode()) toggleDarkMode(true); // apply styles if dark mode\n    }, [location]); // Rerun effect on route change\n\n    // Store dark mode preference in cookie\n    const storeDarkMode = (value) => setCookie('dark-mode', value, 365);\n\n    // Toggle dark mode styles\n    const toggleDarkMode = (value) => {\n        document.body.classList.toggle('dark-mode', value); // Update body class\n        \n        // Toggle styles for selected elements\n        const selectors = 'html, body, p, div, label, span, nav, Link, ul, h1, h2, .background, .navbar, .navbar__list, .navbar__link';\n        document.querySelectorAll(selectors).forEach(el => el.classList.toggle('dark-mode', value));\n        \n        storeDarkMode(value); // Update the cookie\n    }\n\n    // Handle the checkbox toggle\n    const handleToggleChange = () => {\n        const newValue = !isDarkMode; // Get opposite of current state\n        setIsDarkMode(newValue); // Update state\n        toggleDarkMode(newValue); // Toggle styles\n    }\n\n    return (\n        <input type=\"checkbox\" id=\"dark-mode\" checked={isDarkMode} onChange={handleToggleChange} /> // Render checkbox\n    );\n}\n\nexport default DarkModeToggle; // Export component\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sBAAsB;AAC7B,SAASC,SAAS,EAAEC,SAAS,QAAQ,eAAe;AACpD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC,CAAC,CAAsB;EACrD,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErD;EACA,MAAMY,iBAAiB,GAAGA,CAAA,KAAMV,SAAS,CAAC,WAAW,CAAC,KAAK,MAAM;EAEjED,SAAS,CAAC,MAAM;IACZU,aAAa,CAACC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAY;IAC/C,IAAIA,iBAAiB,CAAC,CAAC,EAAEC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EACnD,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB;EACA,MAAMK,aAAa,GAAIC,KAAK,IAAKZ,SAAS,CAAC,WAAW,EAAEY,KAAK,EAAE,GAAG,CAAC;;EAEnE;EACA,MAAMF,cAAc,GAAIE,KAAK,IAAK;IAC9BC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEJ,KAAK,CAAC,CAAC,CAAC;;IAEpD;IACA,MAAMK,SAAS,GAAG,4GAA4G;IAC9HJ,QAAQ,CAACK,gBAAgB,CAACD,SAAS,CAAC,CAACE,OAAO,CAACC,EAAE,IAAIA,EAAE,CAACL,SAAS,CAACC,MAAM,CAAC,WAAW,EAAEJ,KAAK,CAAC,CAAC;IAE3FD,aAAa,CAACC,KAAK,CAAC,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMS,kBAAkB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,QAAQ,GAAG,CAACf,UAAU,CAAC,CAAC;IAC9BC,aAAa,CAACc,QAAQ,CAAC,CAAC,CAAC;IACzBZ,cAAc,CAACY,QAAQ,CAAC,CAAC,CAAC;EAC9B,CAAC;;EAED,oBACInB,OAAA;IAAOoB,IAAI,EAAC,UAAU;IAACC,EAAE,EAAC,WAAW;IAACC,OAAO,EAAElB,UAAW;IAACmB,QAAQ,EAAEL;EAAmB;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,CAAC;EAAA;AAEpG;AAACzB,EAAA,CApCQD,cAAc;EAAA,QACFH,WAAW;AAAA;AAAA8B,EAAA,GADvB3B,cAAc;AAsCvB,eAAeA,cAAc,CAAC,CAAC;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}